// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package consensus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileOpClient is the client API for FileOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileOpClient interface {
	// Sends a greeting
	Cp(ctx context.Context, in *DirPath, opts ...grpc.CallOption) (*Empty, error)
	Mv(ctx context.Context, in *DirPath, opts ...grpc.CallOption) (*Empty, error)
	Rm(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Empty, error)
	MkDir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Empty, error)
}

type fileOpClient struct {
	cc grpc.ClientConnInterface
}

func NewFileOpClient(cc grpc.ClientConnInterface) FileOpClient {
	return &fileOpClient{cc}
}

func (c *fileOpClient) Cp(ctx context.Context, in *DirPath, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.FileOp/Cp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOpClient) Mv(ctx context.Context, in *DirPath, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.FileOp/Mv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOpClient) Rm(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.FileOp/Rm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOpClient) MkDir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.FileOp/MkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileOpServer is the server API for FileOp service.
// All implementations must embed UnimplementedFileOpServer
// for forward compatibility
type FileOpServer interface {
	// Sends a greeting
	Cp(context.Context, *DirPath) (*Empty, error)
	Mv(context.Context, *DirPath) (*Empty, error)
	Rm(context.Context, *Path) (*Empty, error)
	MkDir(context.Context, *Path) (*Empty, error)
	mustEmbedUnimplementedFileOpServer()
}

// UnimplementedFileOpServer must be embedded to have forward compatible implementations.
type UnimplementedFileOpServer struct {
}

func (UnimplementedFileOpServer) Cp(context.Context, *DirPath) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cp not implemented")
}
func (UnimplementedFileOpServer) Mv(context.Context, *DirPath) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mv not implemented")
}
func (UnimplementedFileOpServer) Rm(context.Context, *Path) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rm not implemented")
}
func (UnimplementedFileOpServer) MkDir(context.Context, *Path) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MkDir not implemented")
}
func (UnimplementedFileOpServer) mustEmbedUnimplementedFileOpServer() {}

// UnsafeFileOpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileOpServer will
// result in compilation errors.
type UnsafeFileOpServer interface {
	mustEmbedUnimplementedFileOpServer()
}

func RegisterFileOpServer(s grpc.ServiceRegistrar, srv FileOpServer) {
	s.RegisterService(&FileOp_ServiceDesc, srv)
}

func _FileOp_Cp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOpServer).Cp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.FileOp/Cp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOpServer).Cp(ctx, req.(*DirPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOp_Mv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOpServer).Mv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.FileOp/Mv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOpServer).Mv(ctx, req.(*DirPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOp_Rm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOpServer).Rm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.FileOp/Rm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOpServer).Rm(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOp_MkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOpServer).MkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.FileOp/MkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOpServer).MkDir(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

// FileOp_ServiceDesc is the grpc.ServiceDesc for FileOp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileOp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.FileOp",
	HandlerType: (*FileOpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cp",
			Handler:    _FileOp_Cp_Handler,
		},
		{
			MethodName: "Mv",
			Handler:    _FileOp_Mv_Handler,
		},
		{
			MethodName: "Rm",
			Handler:    _FileOp_Rm_Handler,
		},
		{
			MethodName: "MkDir",
			Handler:    _FileOp_MkDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consensus/rpc/fs.proto",
}
